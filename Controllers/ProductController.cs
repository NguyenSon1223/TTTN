using Ecommerce.Models;
using Ecommerce.Services;
using Microsoft.AspNetCore.Mvc;

namespace Ecommerce.Controllers
{
    public class ProductController : Controller
    {
        private readonly ProductService _productService;
        private readonly IWebHostEnvironment _environment;

        public ProductController(ProductService productService, IWebHostEnvironment environment)
        {
            _productService = productService;
            _environment = environment;
        }

        // ========== DANH S√ÅCH S·∫¢N PH·∫®M ==========
        public async Task<IActionResult> Index(string? category)
        {
            var products = string.IsNullOrEmpty(category)
                ? await _productService.GetAllAsync()
                : await _productService.GetByCategoryAsync(category);

            // L·∫•y danh s√°ch Category duy nh·∫•t
            var allProducts = await _productService.GetAllAsync();
            var categories = allProducts.Select(p => p.Category).Distinct().ToList();

            ViewBag.Categories = categories;
            ViewBag.SelectedCategory = category;

            return View(products);
        }

        // ========== CHI TI·∫æT S·∫¢N PH·∫®M ==========
        public async Task<IActionResult> Details(string id)
        {
            if (string.IsNullOrEmpty(id))
                return NotFound();

            var product = await _productService.GetByIdAsync(id);
            if (product == null)
                return NotFound();

            return View(product);
        }

        // ========== T·∫†O S·∫¢N PH·∫®M ==========
        [HttpGet]
        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Product product, IFormFile? ImageFile)
        {
            if (!ModelState.IsValid)
                return View(product);

            // ‚úÖ X·ª≠ l√Ω upload h√¨nh ·∫£nh
            if (ImageFile != null && ImageFile.Length > 0)
            {
                var uploadDir = Path.Combine(_environment.WebRootPath, "img");
                if (!Directory.Exists(uploadDir))
                    Directory.CreateDirectory(uploadDir);

                var fileExt = Path.GetExtension(ImageFile.FileName);
                var fileName = Path.GetFileNameWithoutExtension(ImageFile.FileName);
                var uniqueFileName = $"{fileName}_{Guid.NewGuid()}{fileExt}";
                var filePath = Path.Combine(uploadDir, uniqueFileName);

                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await ImageFile.CopyToAsync(fileStream);
                }

                product.ImageUrl = uniqueFileName;
            }

            await _productService.CreateAsync(product);
            TempData["success"] = "‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!";
            return RedirectToAction(nameof(Index));
        }

        // ========== CH·ªàNH S·ª¨A S·∫¢N PH·∫®M ==========
        [HttpGet]
        public async Task<IActionResult> Edit(string id)
        {
            if (string.IsNullOrEmpty(id)) return NotFound();

            var product = await _productService.GetByIdAsync(id);
            if (product == null) return NotFound();

            return View(product);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(string id, Product updatedProduct, IFormFile? ImageFile)
        {
            if (!ModelState.IsValid)
                return View(updatedProduct);

            var existingProduct = await _productService.GetByIdAsync(id);
            if (existingProduct == null)
                return NotFound();

            // ‚úÖ N·∫øu c√≥ upload h√¨nh m·ªõi
            if (ImageFile != null && ImageFile.Length > 0)
            {
                var uploadDir = Path.Combine(_environment.WebRootPath, "img");
                if (!Directory.Exists(uploadDir))
                    Directory.CreateDirectory(uploadDir);

                var fileExt = Path.GetExtension(ImageFile.FileName);
                var fileName = Path.GetFileNameWithoutExtension(ImageFile.FileName);
                var uniqueFileName = $"{fileName}_{Guid.NewGuid()}{fileExt}";
                var filePath = Path.Combine(uploadDir, uniqueFileName);

                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await ImageFile.CopyToAsync(fileStream);
                }

                // ‚úÖ X√≥a h√¨nh c≈© n·∫øu c√≥
                if (!string.IsNullOrEmpty(existingProduct.ImageUrl))
                {
                    var oldImagePath = Path.Combine(uploadDir, existingProduct.ImageUrl);
                    if (System.IO.File.Exists(oldImagePath))
                        System.IO.File.Delete(oldImagePath);
                }

                updatedProduct.ImageUrl = uniqueFileName;
            }
            else
            {
                // Gi·ªØ l·∫°i h√¨nh c≈©
                updatedProduct.ImageUrl = existingProduct.ImageUrl;
            }

            await _productService.UpdateAsync(id, updatedProduct);
            TempData["success"] = "‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!";
            return RedirectToAction(nameof(Index));
        }

        // ========== XO√Å S·∫¢N PH·∫®M ==========
        [HttpPost]
        public async Task<IActionResult> Delete(string id)
        {
            var product = await _productService.GetByIdAsync(id);
            if (product == null)
                return NotFound();

            // X√≥a h√¨nh n·∫øu c√≥
            if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                var uploadDir = Path.Combine(_environment.WebRootPath, "img");
                var oldImagePath = Path.Combine(uploadDir, product.ImageUrl);
                if (System.IO.File.Exists(oldImagePath))
                    System.IO.File.Delete(oldImagePath);
            }

            await _productService.DeleteAsync(id);
            return Ok(new { message = "ƒê√£ x√≥a s·∫£n ph·∫©m!" });
        }

        // ========== TH√äM V√ÄO GI·ªé H√ÄNG ==========
        [HttpPost]
        public IActionResult AddToCart(string id)
        {
            if (!User.Identity.IsAuthenticated)
                return RedirectToAction("Login", "Account");

            // Logic t·∫°m (s·∫Ω n·ªëi v·ªõi CartService sau)
            TempData["success"] = $"üõí ƒê√£ th√™m s·∫£n ph·∫©m ID: {id} v√†o gi·ªè h√†ng!";
            return RedirectToAction(nameof(Index));
        }
    }
}
